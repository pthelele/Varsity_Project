
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.HeadlessException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Pale
 */
public class Service_Report extends javax.swing.JFrame {
    private String searchMethod ="Daily";
    
    private static String FILE = "FirstPdf.pdf";
        private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
                        Font.BOLD);
        private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                        Font.NORMAL, BaseColor.RED);
        private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
                        Font.BOLD);
        private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                        Font.BOLD);
   
 private static String idNum;
    private String reportDate;
    private User user;
    private ClassDao empDetails;
    private Staff staff;
    private ArrayList<ServiceClass> listRep;
    /**
     * Creates new form Service_Report
     */
    public Service_Report() {
        initComponents();
         rdDaily.setSelected(true);
         
         jReportBtn.setEnabled(false);
         User user = new User();
          user = new User();
        this.idNum = user.getIdLogger();
        
        empDetails = new ClassDao();
         staff = new Staff();
        
        try
        {
            empDetails.openConnection();
            staff = empDetails.retrieveEmployee(idNum);
            jLabel4.setText(staff.getFname() + " " + staff.getLname());
            
            empDetails.closeConnection();
        }catch(ClassNotFoundException | SQLException ex)
        {
            JOptionPane.showMessageDialog(null, "Connection Lost: " + ex.getMessage());
        }
         
         //jLabel4
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblService = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        rdDaily = new javax.swing.JRadioButton();
        rdMonthly = new javax.swing.JRadioButton();
        jbtnDisplay = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        rdWeekly = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jReportBtn = new javax.swing.JButton();
        fileSelecter = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        manPanel = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        empReport = new javax.swing.JMenuItem();
        perfReport = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Service Report:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MV Boli", 1, 14))); // NOI18N

        tblService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Service Date", "Employee Names", "Fuel Dispensed", "Tank_id", "fuel_type"
            }
        ));
        jScrollPane1.setViewportView(tblService);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Criteria:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MV Boli", 0, 12))); // NOI18N

        rdDaily.setText("Daily Service Report");
        rdDaily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdDailyActionPerformed(evt);
            }
        });

        rdMonthly.setText("Monthly Report");
        rdMonthly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdMonthlyActionPerformed(evt);
            }
        });

        jbtnDisplay.setText("Display ");
        jbtnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDisplayActionPerformed(evt);
            }
        });

        jDateChooser1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jDateChooser1AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jDateChooser1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDateChooser1MouseClicked(evt);
            }
        });
        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });

        rdWeekly.setText("Weekly Report");
        rdWeekly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdWeeklyActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/reports.jpeg"))); // NOI18N
        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(rdDaily)
                        .addGap(18, 18, 18)
                        .addComponent(rdMonthly)
                        .addGap(18, 18, 18)
                        .addComponent(rdWeekly))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jbtnDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdDaily)
                    .addComponent(rdMonthly)
                    .addComponent(rdWeekly))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnDisplay))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("User:");

        jLabel4.setText("Employee Name");

        jReportBtn.setText("Export");
        jReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReportBtnActionPerformed(evt);
            }
        });

        fileSelecter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PDF File", "Word Doc", "CSV", "Text File" }));

        jLabel2.setText("Export To:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(31, 31, 31)
                                .addComponent(jLabel4))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 42, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jLabel2)
                .addGap(48, 48, 48)
                .addComponent(fileSelecter, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jReportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(29, 29, 29)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jReportBtn)
                    .addComponent(fileSelecter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Navigation");

        jMenuItem1.setText("Home");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        manPanel.setText("Logout");
        manPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manPanelActionPerformed(evt);
            }
        });
        jMenu1.add(manPanel);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reports");

        empReport.setText("Employee Report");
        empReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empReportActionPerformed(evt);
            }
        });
        jMenu2.add(empReport);

        perfReport.setText("Performance Report");
        perfReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perfReportActionPerformed(evt);
            }
        });
        jMenu2.add(perfReport);

        jMenuItem2.setText("Summary Report");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDisplayActionPerformed
        
        DefaultTableModel model = (DefaultTableModel) tblService.getModel();
        model.setRowCount(0);
        ServiceDAO servicedao = new ServiceDAO();
        ArrayList<ServiceClass> serviceInfo = new ArrayList<ServiceClass> ();
        
       
        try
        {
            servicedao.openConnection();
            
            if(searchMethod.equalsIgnoreCase("Daily"))
            {
                SimpleDateFormat sdf = new SimpleDateFormat("YYYY-MM-dd");
                String day = sdf.format(jDateChooser1.getDate());
                serviceInfo = servicedao.getServiceByDay(day);
                
                if(serviceInfo.size() < 1)
                {
                    JOptionPane.showMessageDialog(null, "No records found for the specified search ");
                    jReportBtn.setEnabled(false);
                }
                else
                {
                    model.setRowCount(serviceInfo.size());
                   for(int i = 0; i < serviceInfo.size(); i++)
                    {
                        tblService.setValueAt(serviceInfo.get(i).getServiceDate().substring(0, 10), i, 0);
                        tblService.setValueAt(serviceInfo.get(i).getEmp_fname().substring(0, 1) + " " + serviceInfo.get(i).getEmp_lname() , i, 1);
                        tblService.setValueAt(serviceInfo.get(i).getFuelDispened(), i, 2);
                        tblService.setValueAt(serviceInfo.get(i).getTankId(), i, 3);
                        tblService.setValueAt(serviceInfo.get(i).getFuel_type(), i, 4);

                    } 
                   
                   listRep = serviceInfo;
                   jReportBtn.setEnabled(true);
                }
                
            }
            else if(searchMethod.equalsIgnoreCase("Weekly"))
            {
                
                Calendar calendar = new GregorianCalendar();  
                calendar.setTime(jDateChooser1.getDate());     
                int week = calendar.get(Calendar.WEEK_OF_YEAR);
                
                serviceInfo = servicedao.getServicebyWeek(week -1);
                
               if(serviceInfo.size() < 1)
                {
                    JOptionPane.showMessageDialog(null, "No records found for the specified search");
                     jReportBtn.setEnabled(false);
                }
                else
                {
                    model.setRowCount(serviceInfo.size());
                   for(int i = 0; i < serviceInfo.size(); i++)
                    {
                        tblService.setValueAt(serviceInfo.get(i).getServiceDate().substring(0, 10), i, 0);
                        tblService.setValueAt(serviceInfo.get(i).getEmp_fname().substring(0, 1) + " " + serviceInfo.get(i).getEmp_lname() , i, 1);
                        tblService.setValueAt(serviceInfo.get(i).getFuelDispened(), i, 2);
                        tblService.setValueAt(serviceInfo.get(i).getTankId(), i, 3);
                        tblService.setValueAt(serviceInfo.get(i).getFuel_type(), i, 4);

                    } 
                   jReportBtn.setEnabled(true);
                }
            }
            else if(searchMethod.equalsIgnoreCase("Monthly"))
            {
                SimpleDateFormat sdf = new SimpleDateFormat("MMMM");

                String month = sdf.format(jDateChooser1.getDate());
          
                  serviceInfo = servicedao.getServiceByMonth(month);
                
                if(serviceInfo.size() < 0)
                {
                    JOptionPane.showMessageDialog(null, "No records found for the specified search");
                     jReportBtn.setEnabled(false);
                }
                else
                {
                    //still not working
                     
                     model.setRowCount(serviceInfo.size());
                   for(int i = 0; i < serviceInfo.size(); i++)
                    {
                        tblService.setValueAt(serviceInfo.get(i).getServiceDate().substring(0, 10), i, 0);
                        tblService.setValueAt(serviceInfo.get(i).getEmp_fname().substring(0, 1) + " " + serviceInfo.get(i).getEmp_lname() , i, 1);
                        tblService.setValueAt(serviceInfo.get(i).getFuelDispened(), i, 2);
                        tblService.setValueAt(serviceInfo.get(i).getTankId(), i, 3);
                        tblService.setValueAt(serviceInfo.get(i).getFuel_type(), i, 4);

                    } 
                   
                   jReportBtn.setEnabled(true);
                }
            }
            listRep = serviceInfo;
            servicedao.closeConnetion();
            
        }catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Connection Lost: " + ex.getMessage());
        }
    }//GEN-LAST:event_jbtnDisplayActionPerformed

    private void jDateChooser1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jDateChooser1AncestorAdded

    }//GEN-LAST:event_jDateChooser1AncestorAdded

    private void jDateChooser1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDateChooser1MouseClicked

        String date = jDateChooser1.getDateFormatString();

    }//GEN-LAST:event_jDateChooser1MouseClicked

    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange

        /*hire_date = jDateChooser1.getDate();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String datF = dateFormat.format(hire_date);

        try
        {
            Date dateVar = dateFormat.parse(datF);
            //JOptionPane.showMessageDialog(null, dateFormat.format(dateVar));
        }catch(ParseException | HeadlessException ex)
        {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }*/

    }//GEN-LAST:event_jDateChooser1PropertyChange

    private void rdDailyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdDailyActionPerformed
        // TODO add your handling code here:
          /*DefaultTableModel model= (DefaultTableModel) tblService.getModel();
                 model.setRowCount(0);*/ 
        rdDaily.setSelected(true);
        rdWeekly.setSelected(false);
        rdMonthly.setSelected(false);
        searchMethod ="Daily";
                   
        
    }//GEN-LAST:event_rdDailyActionPerformed

    private void rdWeeklyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdWeeklyActionPerformed
        // TODO add your handling code here:
          /*DefaultTableModel model= (DefaultTableModel) tblService.getModel();
                 model.setRowCount(0);*/ 
        rdDaily.setSelected(false);
        rdWeekly.setSelected(true);
        rdMonthly.setSelected(false);
        searchMethod ="Weekly";
           
                
    }//GEN-LAST:event_rdWeeklyActionPerformed

    private void rdMonthlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdMonthlyActionPerformed
        // TODO add your handling code here:
         rdDaily.setSelected(false);
        rdWeekly.setSelected(false);
        rdMonthly.setSelected(true);
        searchMethod ="Monthly";
                
    }//GEN-LAST:event_rdMonthlyActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Manager_Panel manP = new Manager_Panel();
        this.dispose();
        manP.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void manPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manPanelActionPerformed
        Login_Form login = new Login_Form();
        this.dispose();
        login.setVisible(true);
    }//GEN-LAST:event_manPanelActionPerformed

    private void jReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReportBtnActionPerformed
        
         String filePath = "C:\\users\\" + System.getProperty("user.name") +"\\Desktop\\";
       
        try{
            
             String fileN = JOptionPane.showInputDialog("Please enter name of your report file");
                if(!fileN.trim().isEmpty())
                {
                    if(fileSelecter.getSelectedItem().toString().equalsIgnoreCase("PDF File"))
                    {
                          JOptionPane.showMessageDialog(null, "PDF File chosen");
                          filePath = filePath + fileN + ".pdf";
                          
                          
                          
                      try
                      {
                          Document doc = new Document();
                          PdfWriter.getInstance(doc, new FileOutputStream(filePath));
                          doc.open();
                          
                          //Metadata
                          doc.addTitle("Daily Report File");
                          doc.addSubject("For Petrol Station");
                          doc.addKeywords("Daily Report" + new Date());
                          doc.addAuthor(staff.getFname() + " " + staff.getLname());
                          doc.addCreator(staff.getFname() + " " + staff.getLname());
                          
                          Paragraph pageTitle = new Paragraph(" ");
                          addEmptyLine( pageTitle, 1);
                          pageTitle.add(new Paragraph("Daily Report", catFont));
                          addEmptyLine( pageTitle, 1);
                          pageTitle.add(new Paragraph("Daily Reported by: " + staff.getFname() + " " + staff.getLname(), smallBold));
                          pageTitle.add(new Paragraph("Date: " + new Date(), smallBold));
                          
                          addEmptyLine( pageTitle, 3);
                         // doc.add(new Paragraph("This is a daily report", smallBold));
                          addEmptyLine( pageTitle, 3);
                          
                          
                           PdfPTable table = new PdfPTable(5);
                           PdfPCell column = new PdfPCell(new Phrase("Service Date"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           column = new PdfPCell(new Phrase("Employee Names"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           column = new PdfPCell(new Phrase("Fuel Dispensed"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           column = new PdfPCell(new Phrase("Tank ID"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           column = new PdfPCell(new Phrase("Fuel Type"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                                   
                           table.setHeaderRows(listRep.size());
                           
                           for (ServiceClass currentService : listRep)
                           {
                               table.addCell(currentService.getServiceDate());
                               table.addCell(currentService.getEmp_fname().subSequence(0, 1) +" " + currentService.getEmp_lname());
                               table.addCell(String.valueOf(currentService.getFuelDispened()));
                               table.addCell(currentService.getTankId());
                               table.addCell(currentService.getFuel_type());
                               
                               
                           }
                           
                           /*Anchor anchor = new Anchor("First Chapter", catFont);
                           anchor.setName("First Chapter");*/
                           Chapter catPart = new Chapter(new Paragraph(), 0);
                 
                           Section subCatPart = catPart.addSection(pageTitle);
                           subCatPart.add(new Paragraph(""));

                           subCatPart.add(table);

                            doc.add(catPart);
                            
                           doc.close();
                           JOptionPane.showMessageDialog(null, "PDF written and saved");
                          
                      }catch(Exception ex)
                      {
                          JOptionPane.showMessageDialog(null, ex.getMessage());
                      }
                    }
                    else if(fileSelecter.getSelectedItem().toString().trim().equalsIgnoreCase("CSV"))
                    {
                        
                        
                         filePath = filePath + fileN + ".xls";
                           File excelReport = new File(filePath);
                           WritableWorkbook wworkbook;
                           wworkbook = Workbook.createWorkbook(excelReport);
                           WritableSheet wsheet = wworkbook.createSheet("Service Report", 0);
                           //headers
                           
                           Label reporter = new Label(0,0, "Report By: " + staff.getFname().substring(0, 1) + " " + staff.getLname());
                           wsheet.addCell(reporter);
                           // Format date
                           SimpleDateFormat reportDate = new SimpleDateFormat("YYYY-MMMM-dd");
                           
                           Label date = new Label(0,1, "Date: " + reportDate.format(new Date()));
                           wsheet.addCell(date);
                           
                           Label serviceDate = new Label(0,3, "Service Date");
                           wsheet.addCell(serviceDate);
                           Label names = new Label(1,3, "Employee Names");
                           wsheet.addCell(names);
                           Label dispensed = new Label(2,3, "Fuel Dispensed");
                           wsheet.addCell(dispensed);
                           Label tankId = new Label(3,3, "Tank ID");
                           wsheet.addCell(tankId);
                           Label fuelType = new Label(4,3, "Fuel Type");
                           wsheet.addCell(fuelType);
                           
                           int x = 4;
                           Label[] sDate = new Label[listRep.size()];
                           Label[]  sFNames = new Label[listRep.size()];
                           Label[] sFDispensed = new Label[listRep.size()];
                           Label[] sTId = new Label[listRep.size()];
                           Label[] sFType = new Label[listRep.size()];
                            int i = 0;
                           SimpleDateFormat formatReport = new SimpleDateFormat("YYYY-MMMM-dd");
                         
                           for(ServiceClass excelPrint : listRep)
                           {
                               
                               sDate[i] = new Label(0, x, excelPrint.getServiceDate().substring(0, 10));
                               wsheet.addCell(sDate[i]);
                               
                               sFNames[i] = new Label(1, x, String.valueOf(excelPrint.getEmp_fname().subSequence(0, 1) + " " + excelPrint.getEmp_lname()));
                               wsheet.addCell(sFNames[i]);
                               
                               sFDispensed[i] = new Label(2, x,  String.valueOf(excelPrint.getFuelDispened()));
                               wsheet.addCell(sFDispensed[i]);
                               
                               sTId[i] = new Label(3, x, String.valueOf(excelPrint.getTankId()));
                               wsheet.addCell(sTId[i]);
                               
                                sFType[i] = new Label(4, x, String.valueOf(excelPrint.getFuel_type()));
                               wsheet.addCell(sFType[i]);
                                x++;
                                i++;
                           }
                           wworkbook.write();
                           wworkbook.close();
                           
                           JOptionPane.showMessageDialog(null, "Excel file Written successfully");
                          
                    }
                    
                    else if(fileSelecter.getSelectedItem().toString().equalsIgnoreCase("Word Doc"))
                    {
                        JOptionPane.showMessageDialog(null, "Word File chosen");
                           filePath = filePath + fileN + ".doc";
                           
                           XWPFDocument document = new XWPFDocument();
                         
                         XWPFTable tableOne = document.createTable();
                                XWPFTableRow tableOneRowOne = tableOne.getRow(0);
                                tableOneRowOne.getCell(0).setText("Service Date");
                                tableOneRowOne.addNewTableCell().setText("Employee Names");
                                tableOneRowOne.addNewTableCell().setText("Fuel Dispensed(Litres)");
                                tableOneRowOne.addNewTableCell().setText("Tank ID");                               
                                tableOneRowOne.addNewTableCell().setText("Fuel Type");
                                
                                /*SimpleDateFormat formDate = new SimpleDateFormat("YYYY-MMMM-dd");
                                String service;*/
                                for(int i = 0; i < listRep.size(); i++)
                                {
                                    //service = formDate.format(listRep.get(i).getServiceDate());
                                    XWPFTableRow tableOneRowTwo = tableOne.createRow();
                                    tableOneRowTwo.getCell(0).setText(listRep.get(i).getServiceDate());
                                    tableOneRowTwo.getCell(1).setText(String.valueOf(listRep.get(i).getEmp_fname().substring(0,1) + " " + listRep.get(i).getEmp_lname()));
                                    tableOneRowTwo.getCell(2).setText(String.valueOf(listRep.get(i).getFuelDispened()));
                                    tableOneRowTwo.getCell(3).setText(String.valueOf(listRep.get(i).getTankId()));                                    
                                    tableOneRowTwo.getCell(4).setText(String.valueOf(listRep.get(i).getFuel_type()));
                                }

                                FileOutputStream outStream = new FileOutputStream(filePath);
                                document.write(outStream);
                                outStream.close();
                           
                           JOptionPane.showMessageDialog(null, "Word document Print succesful");
                    }
                    else if(fileSelecter.getSelectedItem().toString().equalsIgnoreCase("text File"))
                    {
                        
                        filePath = filePath + fileN + ".txt";
                        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(filePath)));

                        DateFormat dateFormat = new SimpleDateFormat("yyyy-MMMM-dd");
                        Date date = new Date();
                        String datestring = dateFormat.format(date);
                        
                        bw.newLine();
                        bw.newLine();
                        bw.write("DAILY REPORT \t\t\t DATE: " +  datestring);
                        bw.newLine();
                        bw.write(staff.getFname() + " "+staff.getFname());
                        bw.newLine();
                        bw.write("Service Date" + "\t" + "Employee Names" +"\t"+ "Fuel Dispensed\tTank ID\tFuel Type" );
                        bw.newLine();
                        
                        for (ServiceClass currentService : listRep) {

                                  bw.write( "\t" + currentService.getServiceDate() + "\t"+ currentService.getEmp_fname().substring(0, 1)+ " " +currentService.getEmp_lname() +"\t"+ currentService.getFuelDispened()+"\t"+currentService.getTankId()+"\t\t\t"+ currentService.getFuel_type());
                                  bw.newLine();
                              }
                             bw.close();
                             JOptionPane.showMessageDialog(null, "Text File Print succesful");
                    }
                }
                else
                {
                    int test = JOptionPane.showConfirmDialog(null, "File name empty, ensure you type alphanumeric characters, Click yes to re-enter");
                    if(test == 0)
                    {
                        jReportBtn.doClick();
                    }
                }
        }catch(HeadlessException | IOException | WriteException ex)
        {
            JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
        }
    }//GEN-LAST:event_jReportBtnActionPerformed

    private void perfReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perfReportActionPerformed
       
        Performance_Report performanceR = new Performance_Report();
        this.dispose();
        performanceR.setVisible(true);
    }//GEN-LAST:event_perfReportActionPerformed

    private void empReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empReportActionPerformed
       Employee_Report employee = new Employee_Report();
       this.dispose();
       employee.setVisible(true);
    }//GEN-LAST:event_empReportActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        Summary_Report sReport = new Summary_Report();
        this.dispose();
        sReport.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Service_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Service_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Service_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Service_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Service_Report().setVisible(true);
            }
        });
    }
    
    public void addEmptyLine(Paragraph par, int num)
    {
      for(int i = 0; i < num; i ++)
      {
          par.add(new Paragraph(" "));
      }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem empReport;
    private javax.swing.JComboBox<String> fileSelecter;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jReportBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnDisplay;
    private javax.swing.JMenuItem manPanel;
    private javax.swing.JMenuItem perfReport;
    private javax.swing.JRadioButton rdDaily;
    private javax.swing.JRadioButton rdMonthly;
    private javax.swing.JRadioButton rdWeekly;
    private javax.swing.JTable tblService;
    // End of variables declaration//GEN-END:variables
}
