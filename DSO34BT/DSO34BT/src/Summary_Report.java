
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFStyles;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;




public class Summary_Report extends javax.swing.JFrame {

    private String searchMethod = "Daily";
    private String reportDate;
    private User user;
    private ClassDao empDetails;
    private Staff staff;
    private ArrayList<Summary_ReportClass> listRep;
    private DefaultTableModel model;
    
    
    //PDF data members
    
     private static String FILE = "DailyReport.pdf";
     private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
                        Font.BOLD);
     private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                        Font.NORMAL, BaseColor.RED);
     private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
                        Font.BOLD);
     private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                        Font.BOLD);
     
    
    
    public Summary_Report() {
        initComponents();
        
        model = (DefaultTableModel) jTableSummary.getModel();
        
        rdrDaily.setSelected(true);
        
       
        jExportBtn.setEnabled(false);
          user = new User();
        
        
        empDetails = new ClassDao();
         staff = new Staff();
        
        try
        {
            empDetails.openConnection();
            staff = empDetails.retrieveEmployee(user.getIdLogger());
            jUserName.setText(staff.getFname() + " " + staff.getLname());
            
            empDetails.closeConnection();
        }catch(ClassNotFoundException | SQLException ex)
        {
            JOptionPane.showMessageDialog(null, "Connection Lost: " + ex.getMessage());
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        rdrDaily = new javax.swing.JRadioButton();
        rdrMonthly = new javax.swing.JRadioButton();
        rdrWeekly = new javax.swing.JRadioButton();
        jDayChooser = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jMostCost = new javax.swing.JButton();
        jMostDispened = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSummary = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jUserName = new javax.swing.JLabel();
        jExportBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fileSelecter = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        MnuExit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Summary Report:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MV Boli", 1, 14))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Criteria:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MV Boli", 0, 12))); // NOI18N

        rdrDaily.setBackground(new java.awt.Color(255, 255, 255));
        rdrDaily.setText("Daily Summary Report");
        rdrDaily.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdrDailyMouseClicked(evt);
            }
        });

        rdrMonthly.setBackground(new java.awt.Color(255, 255, 255));
        rdrMonthly.setText("Montlhly Report");
        rdrMonthly.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdrMonthlyMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                rdrMonthlyMouseEntered(evt);
            }
        });

        rdrWeekly.setBackground(new java.awt.Color(255, 255, 255));
        rdrWeekly.setText("Weekly Report");
        rdrWeekly.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdrWeeklyMouseClicked(evt);
            }
        });

        jButton1.setText("Display Report");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMostCost.setText("Fuel With most generated Income");
        jMostCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMostCostActionPerformed(evt);
            }
        });

        jMostDispened.setText("Most Dispensed Fuel");
        jMostDispened.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMostDispenedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDayChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdrDaily)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(rdrWeekly)
                        .addGap(41, 41, 41)
                        .addComponent(rdrMonthly)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jMostCost, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addComponent(jMostDispened, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(58, 58, 58))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdrDaily)
                    .addComponent(rdrWeekly)
                    .addComponent(rdrMonthly)
                    .addComponent(jMostDispened, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jDayChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jMostCost, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)))
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTableSummary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fuel Type", "Fuel Price", "Amount Gen(R)", "Fuel Dispensed(Litres)"
            }
        ));
        jScrollPane1.setViewportView(jTableSummary);

        jLabel1.setText("User:");

        jUserName.setText("Employee Name");

        jExportBtn.setText("Export");
        jExportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExportBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Choose file to Export To:");

        fileSelecter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PDF File", "Word Doc", "CSV" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel3)
                .addGap(69, 69, 69)
                .addComponent(fileSelecter, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jExportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(165, 165, 165))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jUserName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jExportBtn)
                    .addComponent(jLabel3)
                    .addComponent(fileSelecter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu3.setText("Navigation");

        jMenuItem5.setText("Home");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem6.setText("Logout");
        jMenu3.add(jMenuItem6);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Report");

        jMenuItem4.setText("Employee Report");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem4);

        jMenuItem1.setText("Performance Report");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        jMenuItem3.setText("Service Report");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuBar1.add(jMenu4);

        MnuExit.setText("Exit");
        MnuExit.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                MnuExitMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        jMenuBar1.add(MnuExit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        Manager_Panel manP = new Manager_Panel();
        this.dispose();
        manP.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        Service_Report serviceReport = new Service_Report();
        this.dispose();
        serviceReport.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        Employee_Report empReport = new Employee_Report();
        this.dispose();
        empReport.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void MnuExitMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_MnuExitMenuKeyPressed
        System.exit(1);
    }//GEN-LAST:event_MnuExitMenuKeyPressed

    private void rdrDailyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdrDailyMouseClicked
        rdrDaily.setSelected(true);
        rdrWeekly.setSelected(false);
        rdrMonthly.setSelected(false);
        
        searchMethod = "Daily";
       
    }//GEN-LAST:event_rdrDailyMouseClicked

    private void rdrWeeklyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdrWeeklyMouseClicked
        rdrDaily.setSelected(false);
        rdrWeekly.setSelected(true);
        rdrMonthly.setSelected(false);
        
        searchMethod = "Weekly";
        
      
    }//GEN-LAST:event_rdrWeeklyMouseClicked

    private void rdrMonthlyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdrMonthlyMouseClicked
        rdrDaily.setSelected(false);
        rdrWeekly.setSelected(false);
        rdrMonthly.setSelected(true);
        
        searchMethod = "Monthly";
        
        
    }//GEN-LAST:event_rdrMonthlyMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        
        Summary_ReportClass summarReport = new Summary_ReportClass();
        Summary_ReportDAO dao = new Summary_ReportDAO();
        
        SimpleDateFormat dateF = new SimpleDateFormat("YYYY-M-d");
        String date = dateF.format(jDayChooser.getDate());
        
        ArrayList<Fuel> fuel = new ArrayList<Fuel>();
        FuelDAO fuelDao = new FuelDAO();
        
        listRep = new ArrayList<Summary_ReportClass>();
       
        
        try
        {
            fuelDao.openConn();
            fuel = fuelDao.summaryFuels();
            
            
            
            
                if(searchMethod.equalsIgnoreCase("Daily"))
                {
                    dao.openConnection();
                    model.setNumRows(fuel.size());

                    for(int y = 0; y < fuel.size(); y ++)
                        {
                        summarReport = dao.comulatedVals(fuel.get(y).getFuel_type(),fuel.get(y).getFuel_price() , fuel.get(y).getFuel_id(), date);

                        jTableSummary.setValueAt(summarReport.getFuelType(), y, 0);
                        jTableSummary.setValueAt(summarReport.getFuelPrice(), y, 1);
                        jTableSummary.setValueAt(summarReport.getAmtGen(), y, 2);
                        jTableSummary.setValueAt(summarReport.getFuelDispensed(), y, 3);
                        
                       listRep.add(summarReport);
                    }
                    jExportBtn.setEnabled(true);
                    
                }
                else if(searchMethod.equalsIgnoreCase("Weekly"))
                {
                    

                    Calendar cal = Calendar.getInstance();
                    cal.setTime(jDayChooser.getDate());
                    int week =  cal.get(Calendar.WEEK_OF_YEAR) - 1;
                    
                    JOptionPane.showMessageDialog(null, String.valueOf(week));
                    
                    dao.openConnection();
                    model.setNumRows(fuel.size());

                    for(int y = 0; y < fuel.size(); y ++)
                        {
                        summarReport = dao.comulatedWeekVals(fuel.get(y).getFuel_type(),fuel.get(y).getFuel_price() , fuel.get(y).getFuel_id(), week);

                        jTableSummary.setValueAt(summarReport.getFuelType(), y, 0);
                        jTableSummary.setValueAt(summarReport.getFuelPrice(), y, 1);
                        jTableSummary.setValueAt(summarReport.getAmtGen(), y, 2);
                        jTableSummary.setValueAt(summarReport.getFuelDispensed(), y, 3);
                        //listRep.add(summarReport);
                    }
                    jExportBtn.setEnabled(true);
                }
                else if(searchMethod.equalsIgnoreCase("Monthly"))
                {
                    SimpleDateFormat sdf = new SimpleDateFormat("MMMM");

                    String month = sdf.format(jDayChooser.getDate());


                    model.setNumRows(fuel.size());
                    dao.openConnection();

                    for(int y = 0; y < fuel.size(); y ++)
                            {
                            summarReport = dao.summaryMonth(fuel.get(y).getFuel_type(),fuel.get(y).getFuel_price() , fuel.get(y).getFuel_id(), month);

                            jTableSummary.setValueAt(summarReport.getFuelType(), y, 0);
                            jTableSummary.setValueAt(summarReport.getFuelPrice(), y, 1);
                            jTableSummary.setValueAt(summarReport.getAmtGen(), y, 2);
                            jTableSummary.setValueAt(summarReport.getFuelDispensed(), y, 3);
                            //listRep.add(summarReport);
                        }
                    jExportBtn.setEnabled(true);
                }
        

            fuelDao.closeConn();
        }catch(ClassNotFoundException | SQLException ex)
        {
            JOptionPane.showMessageDialog(null, "Connection Lost: ");
        }catch(NullPointerException ex)
        {
            JOptionPane.showMessageDialog(null, "No records found for the specified search");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void rdrMonthlyMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdrMonthlyMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_rdrMonthlyMouseEntered

    private void jMostDispenedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMostDispenedActionPerformed
        Summary_ReportClass[] sortObjects;
        
        Summary_ReportClass summarReport = new Summary_ReportClass();
        Summary_ReportDAO dao = new Summary_ReportDAO();
        
        SimpleDateFormat dateF = new SimpleDateFormat("YYYY-M-d");
        String date = dateF.format(jDayChooser.getDate());
        
        ArrayList<Fuel> fuel = new ArrayList<Fuel>();
        FuelDAO fuelDao = new FuelDAO();
        
        
            listRep = new ArrayList<Summary_ReportClass>();
        
        
        
        try
        {
            fuelDao.openConn();
            fuel = fuelDao.summaryFuels();
            sortObjects = new Summary_ReportClass[fuel.size()];
            
            dao.openConnection();
            
            if(searchMethod.equalsIgnoreCase("Daily"))
            {
                    for(int y = 0; y < sortObjects.length; y ++)
                    {
                        summarReport = dao.comulatedVals(fuel.get(y).getFuel_type(),fuel.get(y).getFuel_price() , fuel.get(y).getFuel_id(), date);
                        sortObjects[y] = summarReport;
                    }
                    
                    model.setNumRows(fuel.size());
                    
                    // orting according to most dispensed
                    
                   //creat tem object
                   Summary_ReportClass tempReport = new Summary_ReportClass();
                    for(int i = 0; i <  sortObjects.length; i ++)
                    {
                        for(int y = 1; y <  sortObjects.length; y ++)
                        {
                            if(sortObjects[y - 1].getFuelDispensed() < sortObjects[y].getFuelDispensed())
                            {
                                tempReport = sortObjects[y - 1];
                                sortObjects[y-1] = sortObjects[y];
                                sortObjects[y] = tempReport;
                            }
                        }
                    }
                    
                    for(int y = 0; y <  sortObjects.length; y ++)
                    {
                        
                            jTableSummary.setValueAt(sortObjects[y].getFuelType(), y, 0);
                            jTableSummary.setValueAt(sortObjects[y].getFuelPrice(), y, 1);
                            jTableSummary.setValueAt(sortObjects[y].getAmtGen(), y, 2);
                            jTableSummary.setValueAt(sortObjects[y].getFuelDispensed(), y, 3);
                            listRep.add(sortObjects[y]);
                    }
                    jExportBtn.setEnabled(true);
                    
            }
            else if(searchMethod.equalsIgnoreCase("Weekly"))
            {
                
                Calendar cal = Calendar.getInstance();
                    cal.setTime(jDayChooser.getDate());
                    int week =  cal.get(Calendar.WEEK_OF_YEAR) - 1;                   
                    
                    dao.openConnection();
                 for(int y = 0; y < sortObjects.length; y ++)
                    {
                       summarReport = dao.comulatedWeekVals(fuel.get(y).getFuel_type(),fuel.get(y).getFuel_price() , fuel.get(y).getFuel_id(), week);
                       sortObjects[y] = summarReport;
                    }
                    
                    model.setNumRows(fuel.size());
                    
                    // orting according to most dispensed
                    
                   //creat tem object
                   Summary_ReportClass tempReport = new Summary_ReportClass();
                    for(int i = 0; i <  sortObjects.length; i ++)
                    {
                        for(int y = 1; y <  sortObjects.length; y ++)
                        {
                            if(sortObjects[y - 1].getFuelDispensed() < sortObjects[y].getFuelDispensed())
                            {
                                tempReport = sortObjects[y - 1];
                                sortObjects[y-1] = sortObjects[y];
                                sortObjects[y] = tempReport;
                            }
                        }
                    }
                    
                    for(int y = 0; y <  sortObjects.length; y ++)
                    {
                        
                            jTableSummary.setValueAt(sortObjects[y].getFuelType(), y, 0);
                            jTableSummary.setValueAt(sortObjects[y].getFuelPrice(), y, 1);
                            jTableSummary.setValueAt(sortObjects[y].getAmtGen(), y, 2);
                            jTableSummary.setValueAt(sortObjects[y].getFuelDispensed(), y, 3);
                            listRep.add(sortObjects[y]);
                    }
                    jExportBtn.setEnabled(true);
            }
            else if(searchMethod.equalsIgnoreCase("Monthly"))
            {
                
                SimpleDateFormat sdf = new SimpleDateFormat("MMMM");

                    String month = sdf.format(jDayChooser.getDate());


                    dao.openConnection();
                 for(int y = 0; y < sortObjects.length; y ++)
                    {
                        summarReport = dao.summaryMonth(fuel.get(y).getFuel_type(),fuel.get(y).getFuel_price() , fuel.get(y).getFuel_id(), month);
                        sortObjects[y] = summarReport;
                    }
                    
                    model.setNumRows(fuel.size());
                    
                    // orting according to most dispensed
                    
                   //creat tem object
                   Summary_ReportClass tempReport = new Summary_ReportClass();
                    for(int i = 0; i <  sortObjects.length; i ++)
                    {
                        for(int y = 1; y <  sortObjects.length; y ++)
                        {
                            if(sortObjects[y - 1].getFuelDispensed() < sortObjects[y].getFuelDispensed());
                            {
                                tempReport = sortObjects[y - 1];
                                sortObjects[y-1] = sortObjects[y];
                                sortObjects[y] = tempReport;
                            }
                        }
                    }
                    
                    for(int y = 0; y <  sortObjects.length; y ++)
                    {
                        
                            jTableSummary.setValueAt(sortObjects[y].getFuelType(), y, 0);
                            jTableSummary.setValueAt(sortObjects[y].getFuelPrice(), y, 1);
                            jTableSummary.setValueAt(sortObjects[y].getAmtGen(), y, 2);
                            jTableSummary.setValueAt(sortObjects[y].getFuelDispensed(), y, 3);
                            listRep.add(sortObjects[y]);
                    }
                    jExportBtn.setEnabled(true);
                
            }
            
        }catch(SQLException | ClassNotFoundException ex)
        {
            JOptionPane.showMessageDialog(null, "Connection Lost: " + ex.getLocalizedMessage());
        }catch(NullPointerException ex)
        {
            JOptionPane.showMessageDialog(null, "No records for the specified saerch");
        }
    }//GEN-LAST:event_jMostDispenedActionPerformed

    private void jMostCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMostCostActionPerformed
        
        Summary_ReportClass[] sortObjects;
        
        Summary_ReportClass summarReport = new Summary_ReportClass();
        Summary_ReportDAO dao = new Summary_ReportDAO();
        
        SimpleDateFormat dateF = new SimpleDateFormat("YYYY-M-d");
        String date = dateF.format(jDayChooser.getDate());
        
        ArrayList<Fuel> fuel = new ArrayList<Fuel>();
        FuelDAO fuelDao = new FuelDAO();
        
        listRep = new ArrayList<Summary_ReportClass>();
        
         DecimalFormat roundNum = new DecimalFormat(".##");
        
        
        try
        {
            fuelDao.openConn();
            fuel = fuelDao.summaryFuels();
            sortObjects = new Summary_ReportClass[fuel.size()];
            
            dao.openConnection();
            
            if(searchMethod.equalsIgnoreCase("Daily"))
            {
                    for(int y = 0; y < sortObjects.length; y ++)
                    {
                        summarReport = dao.comulatedVals(fuel.get(y).getFuel_type(),fuel.get(y).getFuel_price() , fuel.get(y).getFuel_id(), date);
                        sortObjects[y] = summarReport;
                    }
                    
                    model.setNumRows(fuel.size());
                    
                    // sorting according to most dispensed
                    
                   //create the object
                   Summary_ReportClass tempReport = new Summary_ReportClass();
                    for(int i = 0; i <  sortObjects.length; i ++)
                    {
                        for(int y = 1; y <  sortObjects.length; y ++)
                        {
                            if(sortObjects[y - 1].getAmtGen() < sortObjects[y].getAmtGen())
                            {
                                tempReport = sortObjects[y - 1];
                                sortObjects[y-1] = sortObjects[y];
                                sortObjects[y] = tempReport;
                            }
                        }
                    }
                    
                    for(int y = 0; y <  sortObjects.length; y ++)
                    {
                        
                            jTableSummary.setValueAt(sortObjects[y].getFuelType(), y, 0);
                            jTableSummary.setValueAt(roundNum.format(sortObjects[y].getFuelPrice()), y, 1);
                            jTableSummary.setValueAt(roundNum.format(sortObjects[y].getAmtGen()), y, 2);
                            jTableSummary.setValueAt(roundNum.format(sortObjects[y].getFuelDispensed()), y, 3);
                            listRep.add(sortObjects[y]);
                    }
                    
            }
            else if(searchMethod.equalsIgnoreCase("Weekly"))
            {
                
                Calendar cal = Calendar.getInstance();
                    cal.setTime(jDayChooser.getDate());
                    int week =  cal.get(Calendar.WEEK_OF_YEAR) - 1;                   
                    
                    dao.openConnection();
                 for(int y = 0; y < sortObjects.length; y ++)
                    {
                       summarReport = dao.comulatedWeekVals(fuel.get(y).getFuel_type(),fuel.get(y).getFuel_price() , fuel.get(y).getFuel_id(), week);
                       sortObjects[y] = summarReport;
                    }
                    
                    model.setNumRows(fuel.size());
                    
                    // orting according to most dispensed
                    
                   //creat tem object
                   Summary_ReportClass tempReport = new Summary_ReportClass();
                    for(int i = 0; i <  sortObjects.length; i ++)
                    {
                        for(int y = 1; y <  sortObjects.length; y ++)
                        {
                            if(sortObjects[y - 1].getAmtGen() < sortObjects[y].getAmtGen())
                            {
                                tempReport = sortObjects[y - 1];
                                sortObjects[y-1] = sortObjects[y];
                                sortObjects[y] = tempReport;
                            }
                        }
                    }
                    
                    for(int y = 0; y <  sortObjects.length; y ++)
                    {
                        
                            jTableSummary.setValueAt(sortObjects[y].getFuelType(), y, 0);
                            jTableSummary.setValueAt(sortObjects[y].getFuelPrice(), y, 1);
                            jTableSummary.setValueAt(sortObjects[y].getAmtGen(), y, 2);
                            jTableSummary.setValueAt(sortObjects[y].getFuelDispensed(), y, 3);
                            listRep.add(sortObjects[y]);
                    }
            }
            else if(searchMethod.equalsIgnoreCase("Monthly"))
            {
                
                SimpleDateFormat sdf = new SimpleDateFormat("MMMM");

                    String month = sdf.format(jDayChooser.getDate());

                    dao.openConnection();
                 for(int y = 0; y < sortObjects.length; y ++)
                    {
                        summarReport = dao.summaryMonth(fuel.get(y).getFuel_type(),fuel.get(y).getFuel_price() , fuel.get(y).getFuel_id(), month);
                        sortObjects[y] = summarReport;
                    }
                    
                    model.setNumRows(fuel.size());
                    
                    // sorting according to most dispensed
                    
                   //create the object
                   Summary_ReportClass tempReport = new Summary_ReportClass();
                    for(int i = 0; i <  sortObjects.length; i ++)
                    {
                        for(int y = 1; y <  sortObjects.length; y ++)
                        {
                            if(sortObjects[y - 1].getAmtGen() < sortObjects[y].getAmtGen());
                            {
                                tempReport = sortObjects[y - 1];
                                sortObjects[y-1] = sortObjects[y];
                                sortObjects[y] = tempReport;
                            }
                        }
                    }
                    
                    for(int y = 0; y <  sortObjects.length; y ++)
                    {
                        
                            jTableSummary.setValueAt(sortObjects[y].getFuelType(), y, 0);
                            jTableSummary.setValueAt(sortObjects[y].getFuelPrice(), y, 1);
                            jTableSummary.setValueAt(sortObjects[y].getAmtGen(), y, 2);
                            jTableSummary.setValueAt(sortObjects[y].getFuelDispensed(), y, 3);
                            listRep.add(sortObjects[y]);
                    }
                
            }
            
        }catch(SQLException | ClassNotFoundException ex)
        {
            JOptionPane.showMessageDialog(null, "Connection Lost: " + ex.getLocalizedMessage());
        }catch(NullPointerException ex)
        {
            JOptionPane.showMessageDialog(null, "No records for the specified saerch");
        }
    }//GEN-LAST:event_jMostCostActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Performance_Report pReport = new Performance_Report();
        this.dispose();
        pReport.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jExportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExportBtnActionPerformed
        String filePath = "C:\\users\\" + System.getProperty("user.name") +"\\Desktop\\";
        SimpleDateFormat dateForm = new SimpleDateFormat("YYYY-MMMM-d");
        String dateReport = dateForm.format(new Date());
         try{
            
             String fileN = JOptionPane.showInputDialog("Please enter name of your report file");
                if(!fileN.trim().isEmpty())
                {
                    if(fileSelecter.getSelectedItem().toString().equalsIgnoreCase("PDF File"))
                    {
                          
                          filePath = filePath + fileN + ".pdf";
                          
                          
                          
                      try
                      {
                          Document doc = new Document();
                          PdfWriter.getInstance(doc, new FileOutputStream(filePath));
                          doc.open();
                          
                          //Metadata
                          doc.addTitle("Daily Report File");
                          doc.addSubject("For Petrol Station");
                          doc.addKeywords("Summary Report" + new Date());
                          doc.addAuthor(staff.getFname() + " " + staff.getLname());
                          doc.addCreator(staff.getFname() + " " + staff.getLname());
                          
                          Paragraph pageTitle = new Paragraph(" ");
                          addEmptyLine( pageTitle, 1);
                          pageTitle.add(new Paragraph("Summary Report", catFont));
                          addEmptyLine( pageTitle, 1);
                          pageTitle.add(new Paragraph("Summary Report by: " + staff.getFname() + " " + staff.getLname(), smallBold));
                          pageTitle.add(new Paragraph("Date: " + dateReport, smallBold));
                          
                          addEmptyLine( pageTitle, 3);
                         
                          addEmptyLine( pageTitle, 3);
                          
                          
                           PdfPTable table = new PdfPTable(4);
                           PdfPCell column = new PdfPCell(new Phrase("Fuel Type"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           column = new PdfPCell(new Phrase("Fuel Price"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           column = new PdfPCell(new Phrase("Amount Gen(R)"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           column = new PdfPCell(new Phrase("Fuel Dispensed"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           
                                   
                           table.setHeaderRows(listRep.size());
                           
                           for (Summary_ReportClass currentService : listRep)
                           {
                               table.addCell(currentService.getFuelType());
                               table.addCell(String.valueOf(currentService.getFuelPrice()));
                               table.addCell(String.valueOf(currentService.getAmtGen()));
                               table.addCell(String.valueOf(currentService.getFuelDispensed()));
                               
                               
                               
                           }
                           
                           Chapter catPart = new Chapter(new Paragraph(), 0);
                 
                           Section subCatPart = catPart.addSection(pageTitle);
                           subCatPart.add(new Paragraph(""));

                           subCatPart.add(table);

                            doc.add(catPart);
                            
                           doc.close();
                           JOptionPane.showMessageDialog(null, "PDF written and saved");
                          
                      }catch(Exception ex)
                      {
                          JOptionPane.showMessageDialog(null, ex.getMessage());
                      }
                    }
                    else if(fileSelecter.getSelectedItem().toString().equalsIgnoreCase("CSV"))
                    {
                          
                           filePath = filePath + fileN + ".xls";
                           File excelReport = new File(filePath);
                           WritableWorkbook wworkbook;
                           wworkbook = Workbook.createWorkbook(excelReport);
                           WritableSheet wsheet = wworkbook.createSheet("Summary Report", 0);
                           //headers
                           
                           Label reporter = new Label(0,0, "Report By: " + staff.getFname().substring(0, 1) + " " + staff.getLname());
                           wsheet.addCell(reporter);
                           // Format date
                           SimpleDateFormat reportDate = new SimpleDateFormat("YYYY-MMMM-dd");
                           
                           Label date = new Label(0,1, "Date: " + reportDate.format(new Date()));
                           wsheet.addCell(date);
                           Label fuelType = new Label(0,3, "Fuel Type");
                           wsheet.addCell(fuelType);
                           Label fuelPrice = new Label(1,3, "Fuel Price");
                           wsheet.addCell(fuelPrice);
                           Label amountGen = new Label(2,3, "Amount Gen(R)");
                           wsheet.addCell(amountGen);
                           Label fuelDispensed = new Label(3,3, "Fuel Dispensed");
                           wsheet.addCell(fuelDispensed);
                           
                           int x = 4;
                           Label[] fType = new Label[listRep.size()];
                           Label[]  fPrie = new Label[listRep.size()];
                           Label[] amtGen = new Label[listRep.size()];
                           Label[] fDispensed = new Label[listRep.size()];
                            int i = 0;
                           
                           for(Summary_ReportClass excelPrint : listRep)
                           {
                               fType[i] = new Label(0, x, excelPrint.getFuelType());
                               wsheet.addCell(fType[i]);
                               
                               fPrie[i] = new Label(1, x, String.valueOf(excelPrint.getFuelPrice()));
                               wsheet.addCell(fPrie[i]);
                               
                               amtGen[i] = new Label(2, x,  String.valueOf(excelPrint.getAmtGen()));
                               wsheet.addCell(amtGen[i]);
                               
                               fDispensed[i] = new Label(3, x, String.valueOf(excelPrint.getFuelDispensed()));
                               wsheet.addCell(fDispensed[i]);
                                x++;
                                i++;
                           }
                           wworkbook.write();
                           wworkbook.close();
                           
                           
                    }
                    
                    else if(fileSelecter.getSelectedItem().toString().equalsIgnoreCase("Word Doc"))
                    {
                        JOptionPane.showMessageDialog(null, "Word File chosen");
                           filePath = filePath + fileN + ".doc";
                           
                                  XWPFDocument document = new XWPFDocument();
                                  /*XWPFStyles styles = document.createStyles();
                                  
                                  String report = "Summary Report";
                                  String user = "Report By: " + staff.getFname() + " " + staff.getLname();
                                  String Date = "Date: " + dateReport;
                                  
                                  
                                   addCustomHeadingStyle(document, styles, report, 1, 36, "4288BC");
*/
                                  

                                XWPFTable tableOne = document.createTable();
                                XWPFTableRow tableOneRowOne = tableOne.getRow(0);
                                tableOneRowOne.getCell(0).setText("Fuel Type");
                                tableOneRowOne.addNewTableCell().setText("Fuel Price");
                                tableOneRowOne.addNewTableCell().setText("Amount Gen(R)");
                                tableOneRowOne.addNewTableCell().setText("Fuel Dispensed(Litres)");

                                for(int i = 0; i < listRep.size(); i++)
                                {
                                    XWPFTableRow tableOneRowTwo = tableOne.createRow();
                                    tableOneRowTwo.getCell(0).setText(listRep.get(i).getFuelType());
                                    tableOneRowTwo.getCell(1).setText(String.valueOf(listRep.get(i).getFuelPrice()));
                                    tableOneRowTwo.getCell(2).setText(String.valueOf(listRep.get(i).getAmtGen()));
                                    tableOneRowTwo.getCell(3).setText(String.valueOf(listRep.get(i).getFuelDispensed()));
                                }

                                FileOutputStream outStream = new FileOutputStream(filePath);
                                document.write(outStream);
                                outStream.close();
                           
                            
                            
                           JOptionPane.showMessageDialog(null, "Word document Print succesful");
                    }
                    else if(fileSelecter.getSelectedItem().toString().equalsIgnoreCase("text File"))
                    {
                        
                        filePath = filePath + fileN + ".txt";
                        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(filePath)));

                        DateFormat dateFormat = new SimpleDateFormat("yyyy-MMMM-dd");
                        Date date = new Date();
                        String datestring = dateFormat.format(date);
                        
                        bw.newLine();
                        bw.newLine();
                        bw.write("DAILY REPORT \t\t\t DATE: " +  datestring);
                        bw.newLine();
                        bw.write(staff.getFname() + " "+staff.getFname());
                        bw.newLine();
                        bw.write("Fuel Type" + "\t" + "Fuel Price" +"\t"+ "Amount Gen(R)\tTank ID\tFuel Dispensed" );
                        bw.newLine();
                        
                        for (Summary_ReportClass currentService : listRep) {

                                  bw.write( "\t" + currentService.getFuelType()+ "\t"+ currentService.getFuelPrice() + "\t R "+ currentService.getAmtGen()+"\t"+currentService.getFuelDispensed());
                                  bw.newLine();
                              }
                             bw.close();
                             JOptionPane.showMessageDialog(null, "Text File Print succesful");
                    }
                }
                else
                {
                    int test = JOptionPane.showConfirmDialog(null, "File name empty, ensure you type alphanumeric characters, Click yes to re-enter");
                    if(test == 0)
                    {
                        jExportBtn.doClick();
                    }
                }
        }catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Error File Not written " + ex.getLocalizedMessage());
        }
        
        
    }//GEN-LAST:event_jExportBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Summary_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Summary_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Summary_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Summary_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Summary_Report().setVisible(true);
            }
        });
    }
    
    public void addEmptyLine(Paragraph par, int num)
    {
      for(int i = 0; i < num; i ++)
      {
          par.add(new Paragraph(" "));
      }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MnuExit;
    private javax.swing.JComboBox fileSelecter;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDayChooser;
    private javax.swing.JButton jExportBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JButton jMostCost;
    private javax.swing.JButton jMostDispened;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableSummary;
    private javax.swing.JLabel jUserName;
    private javax.swing.JRadioButton rdrDaily;
    private javax.swing.JRadioButton rdrMonthly;
    private javax.swing.JRadioButton rdrWeekly;
    // End of variables declaration//GEN-END:variables

    private void addCustomHeadingStyle(XWPFDocument document, XWPFStyles styles, String report, int i, int i0, String bc) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
