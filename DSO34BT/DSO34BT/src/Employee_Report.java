
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Pale
 */
public class Employee_Report extends javax.swing.JFrame {
    
    
     private static String FILE = "DailyReport.pdf";
     private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
                        Font.BOLD);
     private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                        Font.NORMAL, BaseColor.RED);
     private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
                        Font.BOLD);
     private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                        Font.BOLD);
     

    private static String idNum;
    private Staff staff;
    private User user;
    private ArrayList<EmployeeReport> listRep;
      
    public Employee_Report() {
        initComponents();
        
        fileExport.setEnabled(false);
        
        User user = new User();
        this.idNum = user.getIdLogger();
        
        ClassDao empDetails = new ClassDao();
        staff = new Staff();
        
        try
        {
            empDetails.openConnection();
            staff = empDetails.retrieveEmployee(idNum);
            userNames.setText(staff.getFname() + " " + staff.getLname());
            
            empDetails.closeConnection();
        }catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Connection Lost: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEmTable = new javax.swing.JTable();
        fileSelecter = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jDateCheck = new javax.swing.JCheckBox();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jChecEmp = new javax.swing.JCheckBox();
        jEmpId = new javax.swing.JTextField();
        empReport = new javax.swing.JButton();
        jComboFuel = new javax.swing.JComboBox<>();
        jcheByFuel = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        userNames = new javax.swing.JLabel();
        fileExport = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        perfReport = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee Report:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MV Boli", 1, 14))); // NOI18N

        jEmTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name & Initials", "Employee ID", "Service Date", "Fuel Type", "Litres Filledl", "Fuel Amount (R)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jEmTable);

        fileSelecter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PDF File", "Word Doc", "CSV" }));

        jLabel1.setText("Export Report to:");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "View Report By:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MV Boli", 0, 14))); // NOI18N

        jDateCheck.setBackground(new java.awt.Color(255, 255, 255));
        jDateCheck.setText("Print Report By Date");

        jChecEmp.setBackground(new java.awt.Color(255, 255, 255));
        jChecEmp.setText("Employee ID");
        jChecEmp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jChecEmpMouseClicked(evt);
            }
        });
        jChecEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChecEmpActionPerformed(evt);
            }
        });

        jEmpId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jEmpIdKeyTyped(evt);
            }
        });

        empReport.setText("Display Report");
        empReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empReportActionPerformed(evt);
            }
        });

        jcheByFuel.setBackground(new java.awt.Color(255, 255, 255));
        jcheByFuel.setText("Print By Fuel Type");
        jcheByFuel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcheByFuelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(empReport)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateCheck)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jChecEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jEmpId, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jcheByFuel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jComboFuel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDateCheck)
                    .addComponent(jChecEmp)
                    .addComponent(jcheByFuel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jEmpId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboFuel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(empReport))
        );

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/reports.jpeg"))); // NOI18N

        jLabel3.setText("User: ");

        userNames.setText("Employee Name");

        fileExport.setText("Export");
        fileExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileSelecter, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122)
                        .addComponent(fileExport, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addGap(28, 28, 28)
                        .addComponent(userNames)))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(userNames))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(26, 26, 26))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileSelecter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(fileExport))
                .addGap(21, 21, 21))
        );

        jMenu3.setText("Navigation");

        jMenuItem5.setText("Home");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem6.setText("Logout");
        jMenu3.add(jMenuItem6);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Report");

        perfReport.setText("Performance Report");
        perfReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perfReportActionPerformed(evt);
            }
        });
        jMenu4.add(perfReport);

        jMenuItem3.setText("Service Report");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuItem2.setText("Summary Report");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        jMenu2.setText("Exit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        Manager_Panel manP = new Manager_Panel();
        this.dispose();
        manP.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        Service_Report serviceReport = new Service_Report();
        this.dispose();
        serviceReport.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void perfReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perfReportActionPerformed
        Performance_Report pempReport = new Performance_Report();
        this.dispose();
        pempReport.setVisible(true);
    }//GEN-LAST:event_perfReportActionPerformed

    private void jEmpIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jEmpIdKeyTyped
       
        if(jEmpId.getText().length() > 4)
        {
            evt.consume();
        }
    }//GEN-LAST:event_jEmpIdKeyTyped

    private void empReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empReportActionPerformed
        
        DefaultTableModel model = (DefaultTableModel) jEmTable.getModel();
        model.setRowCount(0);
            EmployeeReportDAO empDao = new EmployeeReportDAO();
            ArrayList<EmployeeReport> empList = new ArrayList<EmployeeReport>();
            SimpleDateFormat dateF = new SimpleDateFormat();
            String dateVal;
       try
       {
           empDao.openConn();
         if(jDateCheck.isSelected() && jChecEmp.isSelected() && jcheByFuel.isSelected())
         {
             if(!jEmpId.getText().trim().isEmpty() && jEmpId.getText().trim().length() == 5)
             {
                 int empId = Integer.parseInt(jEmpId.getText().trim());
                 
                 dateF = new SimpleDateFormat("YYYY-MM-dd");
                  dateVal = dateF.format(jDateChooser1.getDate());
                 empList = empDao.getReportAll(dateVal, jEmpId.getText().trim(), jComboFuel.getSelectedItem().toString().trim());           
             }
             else
             {
                 jEmpId.setBackground(Color.orange);
                 JOptionPane.showMessageDialog(null, "Invalid entry for employee ID, please make sure the field is not empty and contains 5 numerical digits");
             }
             
         }
         else if(jDateCheck.isSelected() && jChecEmp.isSelected())
         {
             if(!jEmpId.getText().trim().isEmpty() && jEmpId.getText().trim().length() == 5)
             {
                 if(jEmpId.getText().trim().length() == 5)
                 {
                    int empId = Integer.parseInt(jEmpId.getText().trim());
                 
                    dateF = new SimpleDateFormat("YYYY-MM-dd");
                    dateVal = dateF.format(jDateChooser1.getDate());
                    empList = empDao.getReportByIdDate(dateVal, jEmpId.getText().trim());           
             
                 }
             }
         }
         else if(jChecEmp.isSelected() && jcheByFuel.isSelected())
         {
 
            //getReportByDate
                    dateF = new SimpleDateFormat("YYYY-MM-dd");
                    dateVal = dateF.format(jDateChooser1.getDate());
                    empList = empDao.getReportByFtypeID(jEmpId.getText().trim(), jComboFuel.getSelectedItem().toString().trim());          
         }
         else if(jDateCheck.isSelected() && jcheByFuel.isSelected())
         {
              dateF = new SimpleDateFormat("YYYY-MM-dd");
                  dateVal = dateF.format(jDateChooser1.getDate());
             empList = empDao.getReportByFtypeDate(dateVal, jComboFuel.getSelectedItem().toString().trim());
         }
         else if (jcheByFuel.isSelected())
         {
             empList = empDao.getReportByFtype(jComboFuel.getSelectedItem().toString().trim());
         }
         else if(jChecEmp.isSelected())
         {
             if(jEmpId.getText().trim().length() == 5)
             {
                 empList = empDao.getReportByID(jEmpId.getText().trim());
             }
             else
             {
                 jEmpId.setBackground(Color.orange);
                 JOptionPane.showMessageDialog(null, "Invalid employee Id entry, please ensure that you enter 5 numeric characters for employee ID, and that the field is not empty");
             }
         }
         else if(jDateCheck.isSelected())
         {
             dateF = new SimpleDateFormat("YYYY-MM-dd");
             dateVal = dateF.format(jDateChooser1.getDate());
             empList = empDao.getReportByDate(dateVal);
         }
         
         
         
         else
         {
             int test = JOptionPane.showConfirmDialog(null, "Click yes to search by date as default or no to select one of the check box");
             if(test == 0)
             {
                 jDateCheck.doClick();
                 
                 dateF = new SimpleDateFormat("YYYY-MM-dd");
                dateVal = dateF.format(jDateChooser1.getDate());
                empList = empDao.getReportByDate(dateVal);
             }
         }
         
         if(empList.size() < 1)
            {
                JOptionPane.showMessageDialog(null, "No records found for the specified search");
                fileExport.setEnabled(false);
            }
            else
            {
                model.setRowCount(empList.size());
                
                for(int i = 0; i < empList.size(); i ++)
                {
                    jEmTable.setValueAt(empList.get(i).getEmp_fname().substring(0, 1) + " " + empList.get(i).getEmp_lname().substring(0, 1) , i, 0);
                    jEmTable.setValueAt(empList.get(i).getEmp_id(), i, 1);
                    jEmTable.setValueAt(empList.get(i).getServiceDate(), i, 2);
                    jEmTable.setValueAt(empList.get(i).getFuelType(), i, 3);
                    jEmTable.setValueAt(empList.get(i).getFuelDispensed(), i, 4);
                    jEmTable.setValueAt("R " + empList.get(i).getFuel_cost(), i, 5);
                            
                }
                listRep = empList;
                fileExport.setEnabled(true);
            }
       }catch(ClassNotFoundException | SQLException ex)
       {
           JOptionPane.showMessageDialog(null, "Connection Lost: " + ex.getMessage());
       }catch(NumberFormatException ex)
       {
           JOptionPane.showMessageDialog(null, "Number format error please make sure employee id is numeric");
       }
    }//GEN-LAST:event_empReportActionPerformed

    private void jChecEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChecEmpActionPerformed
        
        if(jChecEmp.isSelected())
        {
            jEmpId.setEnabled(true);
        }
        else
        {
            jEmpId.setEnabled(false);
        }
    }//GEN-LAST:event_jChecEmpActionPerformed

    private void jcheByFuelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcheByFuelActionPerformed
       FuelDAO fuel = new FuelDAO();
       ArrayList<Fuel> classInfo = new ArrayList<Fuel>();
       Fuel fuelObj = new Fuel();
       
       if(jcheByFuel.isSelected())
       {
           try
           {
                fuel.openConn();
              classInfo = fuel.getFuelType();

              for(int i = 0; i < classInfo.size(); i ++)
              {
                    jComboFuel.addItem(classInfo.get(i).getFuel_type());
              }
          }catch(Exception e)
          {
              JOptionPane.showMessageDialog(null, "Connection Lost: " + e.getMessage());
          }
       }
       else
       {
           jComboFuel.removeAllItems();
       }
       
         
       
    }//GEN-LAST:event_jcheByFuelActionPerformed

    private void fileExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExportActionPerformed
         
        
         String filePath = "C:\\users\\" + System.getProperty("user.name") +"\\Desktop\\";
            
        try{
            
             String fileN = JOptionPane.showInputDialog("Please name of your report file");
                if(!fileN.trim().isEmpty())
                {
                    if(fileSelecter.getSelectedItem().toString().equalsIgnoreCase("PDF File"))
                    {
                          JOptionPane.showMessageDialog(null, "PDF File chosen");
                          filePath = filePath + fileN + ".pdf";
                          
                          
                          
                      try
                      {
                          Document doc = new Document();
                          PdfWriter.getInstance(doc, new FileOutputStream(filePath));
                          doc.open();
                          //Metadata
                          doc.addTitle("Daily Report File");
                          doc.addSubject("For Petrol Station");
                          doc.addKeywords("Daily Report" + new Date());
                          doc.addAuthor(staff.getFname() + " " + staff.getLname());
                          doc.addCreator(staff.getFname() + " " + staff.getLname());
                          
                          Paragraph pageTitle = new Paragraph(" ");
                          addEmptyLine( pageTitle, 1);
                          pageTitle.add(new Paragraph("Daily Report", catFont));
                          addEmptyLine( pageTitle, 1);
                          pageTitle.add(new Paragraph("Daily Reported by: " + staff.getFname() + " " + staff.getLname(), smallBold));
                          pageTitle.add(new Paragraph("Date: " + new Date(), smallBold));
                          
                          addEmptyLine( pageTitle, 3);
                         // doc.add(new Paragraph("This is a daily report", smallBold));
                          addEmptyLine( pageTitle, 3);
                          
                          
                           PdfPTable table = new PdfPTable(6);
                           PdfPCell column = new PdfPCell(new Phrase("Employee Names"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           column = new PdfPCell(new Phrase("Employee ID"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           column = new PdfPCell(new Phrase("Service Date"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           column = new PdfPCell(new Phrase("Fuel Type"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           column = new PdfPCell(new Phrase("Litres Filled"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           column = new PdfPCell(new Phrase("Fuel Amount(R)"));
                           column.setHorizontalAlignment(Element.ALIGN_CENTER);
                           table.addCell(column);
                           
                           table.setHeaderRows(listRep.size());
                           
                           for (EmployeeReport currentFuel : listRep)
                           {
                               table.addCell(currentFuel.getEmp_fname().subSequence(0, 1) + currentFuel.getEmp_lname());
                               table.addCell(currentFuel.getEmp_id());
                               table.addCell(currentFuel.getServiceDate());
                               table.addCell(currentFuel.getFuelType());
                               table.addCell(String.valueOf(currentFuel.getFuelDispensed()));
                               table.addCell(String.valueOf(currentFuel.getFuel_cost()));
                               
                           }
                           
                           /*Anchor anchor = new Anchor("First Chapter", catFont);
                           anchor.setName("First Chapter");*/
                           Chapter catPart = new Chapter(new Paragraph(), 0);
                 
                           Section subCatPart = catPart.addSection(pageTitle);
                           subCatPart.add(new Paragraph(""));
                
                           subCatPart.add(table);
                           
                            doc.add(catPart);
                            
                           doc.close();
                           JOptionPane.showMessageDialog(null, "PDF written and saved");
                          
                      }catch(Exception ex)
                      {
                          JOptionPane.showMessageDialog(null, ex.getMessage());
                      }
                    }
                    else if(fileSelecter.getSelectedItem().toString().equalsIgnoreCase("CSV"))
                    {
                          filePath = filePath + fileN + ".xls";
                           File excelReport = new File(filePath);
                           WritableWorkbook wworkbook;
                           wworkbook = Workbook.createWorkbook(excelReport);
                           WritableSheet wsheet = wworkbook.createSheet("Performance Report", 0);
                           //headers
                           
                           Label reporter = new Label(0,0, "Report By: " + staff.getFname().substring(0, 1) + " " + staff.getLname());
                           wsheet.addCell(reporter);
                           // Format date
                           SimpleDateFormat reportDate = new SimpleDateFormat("YYYY-MMMM-dd");
                           
                           Label date = new Label(0,1, "Date: " + reportDate.format(new Date()));
                           wsheet.addCell(date);
                           
                           Label nameInitials = new Label(0,3, "Name & Initials");
                           wsheet.addCell(nameInitials);
                           
                           Label empId = new Label(1,3, "Employee ID");
                           wsheet.addCell(empId);
                           
                           Label serviceDate = new Label(2,3, "Service Date");
                           wsheet.addCell(serviceDate);
                           
                           Label fuelType = new Label(3,3, "Fuel Dispensed");
                           wsheet.addCell(fuelType);
                           
                           Label litresFilled = new Label(4,3, "Litres Filled");
                           wsheet.addCell(litresFilled);
                           
                           Label fuelAmt = new Label(4,3, "Fuel Amount(R)");
                           wsheet.addCell(fuelAmt);
                           
                           int x = 4;
                           Label[] empName = new Label[listRep.size()];
                           Label[]  empID = new Label[listRep.size()];
                           Label[] empDate = new Label[listRep.size()];
                           Label[] empFuelType = new Label[listRep.size()];
                           Label[] empLitresFilled = new Label[listRep.size()];
                           Label[] empLitres = new Label[listRep.size()];
                           
                            int i = 0;
                           SimpleDateFormat formatReport = new SimpleDateFormat("YYYY-MMMM-dd");
                         
                           for(EmployeeReport excelPrint : listRep)
                           {
                               
                               empName[i] = new Label(0, x, excelPrint.getEmp_fname().subSequence(0, 1) + " " + excelPrint.getEmp_lname());
                               wsheet.addCell(empName[i]);
                               
                               empID[i] = new Label(1, x, excelPrint.getEmp_id());
                               wsheet.addCell(empID[i]);
                               
                               empDate[i] = new Label(2, x, excelPrint.getServiceDate().substring(0, 10));
                               wsheet.addCell(empDate[i]);
                               
                               empFuelType[i] = new Label(3, x, excelPrint.getFuelType());
                               wsheet.addCell(empFuelType[i]);
                               
                                empLitres[i] = new Label(4, x, String.valueOf(excelPrint.getFuelDispensed()));
                               wsheet.addCell(empLitres[i]);
                                x++;
                                i++;
                           }
                           wworkbook.write();
                           wworkbook.close();
                           
                           JOptionPane.showMessageDialog(null, "Excel file Written successfully");

                    }
                    
                    else if(fileSelecter.getSelectedItem().toString().equalsIgnoreCase("Word Doc"))
                    {
                        JOptionPane.showMessageDialog(null, "Word File chosen");
                           filePath = filePath + fileN + ".doc";
                           
                           
                           XWPFDocument document = new XWPFDocument();
                           
                           XWPFTable tableOne = document.createTable();
                                XWPFTableRow tableOneRowOne = tableOne.getRow(0);
                                tableOneRowOne.getCell(0).setText("Name & Initials");
                                tableOneRowOne.addNewTableCell().setText("Employee ID");
                                tableOneRowOne.addNewTableCell().setText("Service Date");
                                tableOneRowOne.addNewTableCell().setText("Fuel Type");
                                tableOneRowOne.addNewTableCell().setText("Litres Filled");
                                tableOneRowOne.addNewTableCell().setText("Fuel Amount");

                                for(int i = 0; i < listRep.size(); i++)
                                {
                                    XWPFTableRow tableOneRowTwo = tableOne.createRow();
                                    tableOneRowTwo.getCell(0).setText(listRep.get(i).getEmp_fname().substring(0,1) + " " + listRep.get(i).getEmp_fname().substring(0,1));
                                    tableOneRowTwo.getCell(1).setText(String.valueOf(listRep.get(i).getEmp_id()));
                                    tableOneRowTwo.getCell(2).setText(String.valueOf(listRep.get(i).getServiceDate()));
                                    tableOneRowTwo.getCell(3).setText(String.valueOf(listRep.get(i).getFuelType()));
                                    tableOneRowTwo.getCell(4).setText(String.valueOf(listRep.get(i).getFuelDispensed()));
                                    tableOneRowTwo.getCell(5).setText(String.valueOf(listRep.get(i).getFuel_cost()));
                                }

                                FileOutputStream outStream = new FileOutputStream(filePath);
                                document.write(outStream);
                                outStream.close();
                  
                           
                           JOptionPane.showMessageDialog(null, "Word document Print succesful");
                    }
                    else if(fileSelecter.getSelectedItem().toString().equalsIgnoreCase("text File"))
                    {
                        
                        filePath = filePath + fileN + ".txt";
                        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(filePath)));

                        DateFormat dateFormat = new SimpleDateFormat("yyyy-MMMM-dd");
                        Date date = new Date();
                        String datestring = dateFormat.format(date);
                        
                        bw.newLine();
                        bw.newLine();
                        bw.write("DAILY REPORT \t\t\t DATE: " +  datestring);
                        bw.newLine();
                        bw.write(staff.getFname() + " "+staff.getFname());
                        bw.newLine();
                        bw.write("Employee Names" + "\t" + "Employee ID" +"\t"+ "Service Date\tFuel Type\tLitres Filled\tFuel Amount(R)" );
                        bw.newLine();
                        
                        for (EmployeeReport currentFuel : listRep) {

                                  bw.write(currentFuel.getEmp_fname().substring(0,1)+ " " + currentFuel.getEmp_lname() + "\t" + currentFuel.getEmp_id()+"\t"+ currentFuel.getServiceDate()+"\t"+ currentFuel.getFuelType()+"\t"+currentFuel.getFuelDispensed()+"\t\t\t"+ currentFuel.getFuel_cost());
                                  bw.newLine();
                              }
                             bw.close();
                             JOptionPane.showMessageDialog(null, "Text File Print succesful");
                    }
                }
                else
                {
                    int test = JOptionPane.showConfirmDialog(null, "File name empty, ensure you type alphanumeric characters, Click yes to re-enter");
                    if(test == 0)
                    {
                        empReport.doClick();
                    }
                }
        }catch(Exception ex)
        {
            
        }
    }//GEN-LAST:event_fileExportActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        Summary_Report sReport = new Summary_Report();
        this.dispose();
        sReport.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jChecEmpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jChecEmpMouseClicked
       
        if(!jChecEmp.isSelected())
        {
            jEmpId.setText("");
        }
    }//GEN-LAST:event_jChecEmpMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Employee_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Employee_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Employee_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Employee_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Employee_Report().setVisible(true);
            }
        });
    }
    
    
     public void addEmptyLine(Paragraph par, int num)
    {
      for(int i = 0; i < num; i ++)
      {
          par.add(new Paragraph(" "));
      }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton empReport;
    private javax.swing.JButton fileExport;
    private javax.swing.JComboBox<String> fileSelecter;
    private javax.swing.JCheckBox jChecEmp;
    private javax.swing.JComboBox<String> jComboFuel;
    private javax.swing.JCheckBox jDateCheck;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JTable jEmTable;
    private javax.swing.JTextField jEmpId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox jcheByFuel;
    private javax.swing.JMenuItem perfReport;
    private javax.swing.JLabel userNames;
    // End of variables declaration//GEN-END:variables
}
